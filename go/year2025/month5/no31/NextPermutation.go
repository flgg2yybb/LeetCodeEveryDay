package main

import "fmt"

func main() {
	nums1 := []int{1, 2, 3}
	nums2 := []int{3, 2, 1}
	nums3 := []int{1, 1, 5}
	nextPermutation(nums1)
	nextPermutation(nums2)
	nextPermutation(nums3)
	println(fmt.Sprintf("%v", nums1)) // [1, 3, 2]
	println(fmt.Sprintf("%v", nums2)) // [1, 2, 3]
	println(fmt.Sprintf("%v", nums3)) // [1, 5, 1]
}

/*
Math, times: O(n), space: O(1)
算法推导
1. 我们希望下一个数 比当前数大，这样才满足 “下一个排列” 的定义。因此只需要 将后面的「大数」与前面的「小数」交换，就能得到一个更大的数。
  - 比如 123456，将 5 和 6 交换就能得到一个更大的数 123465。

2. 我们还希望下一个数 增加的幅度尽可能的小，这样才满足“下一个排列与当前排列紧邻“的要求。为了满足这个要求，我们需要：
  - 在 尽可能靠右的低位 进行交换，需要 从后向前 查找
  - 将一个 尽可能小的「大数」 与前面的「小数」交换。比如 123465，下一个排列应该把 5 和 4 交换而不是把 6 和 4 交换
  - 将「大数」换到前面后，需要将「大数」后面的所有数 重置为升序，升序排列就是最小的排列。以 123465 为例：
    首先按照上一步，交换 5 和 4，得到 123564；然后需要将 5 之后的数重置为升序，得到 123546。
    显然 123546 比 123564 更小，123546 就是 123465 的下一个排列

具体步骤
1：从右往左找到第一个升序对 nums[i] < nums[i+1]，这是“转折点”。找到第一个 nums[i] < nums[i+1] 的位置，说明我们可以从这里开始构造更大的排列。
2：从右往左找第一个大于 nums[i] 的元素 nums[j]，这个 j 是一个能替换 i 的最小大于元素，以保证“下一排列尽量小”。
3：交换 nums[i] 和 nums[j]，这个交换产生了更大的排列。
4：[i, i+1] 为第一个升序对，故 i + 1 之后都是倒序，需要反转为生序保证最小排列，将 i+1 到末尾的子数组翻转，这一步确保后缀是最小排列，使整个数组是“最接近的下一个更大排列”。
*/
func nextPermutation(nums []int) {
	i := len(nums) - 2 // 从倒数第二个元素开始

	// 找第一个升序对
	for i >= 0 && nums[i] >= nums[i+1] {
		i--
	}

	if i >= 0 { // 升序对不一定存在，需要防止越界
		// 从后往前找第一个大于 nums[i] 的元素 nums[j]
		for j := len(nums) - 1; j > i; j-- {
			if nums[j] > nums[i] {
				nums[i], nums[j] = nums[j], nums[i] // 交换
				break
			}
		}
	}

	// [i+1:] 为降序，需要反转来保证最小排列
	left, right := i+1, len(nums)-1
	for left < right {
		nums[left], nums[right] = nums[right], nums[left]
		left++
		right--
	}
}

/*
整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。
更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。
如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。

必须 原地 修改，只允许使用额外常数空间。

示例 1：
输入：nums = [1,2,3]
输出：[1,3,2]

示例 2：
输入：nums = [3,2,1]
输出：[1,2,3]

示例 3：
输入：nums = [1,1,5]
输出：[1,5,1]

提示：
1 <= nums.length <= 100
0 <= nums[i] <= 100
*/
